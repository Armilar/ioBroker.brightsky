{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport axios from 'axios';\nimport { Library } from './lib/library';\nimport { genericStateObjects } from './lib/definition';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass Brightsky extends utils.Adapter {\n    library: Library;\n    unload: boolean = false;\n    weatherTimeout: (ioBroker.Timeout | null | undefined)[] = [];\n\n    weatherArray: any[] = [];\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'brightsky',\n        });\n        this.on('ready', this.onReady.bind(this));\n        // this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        this.library = new Library(this, 'Brightsky');\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        await this.setState('info.connection', false, true);\n        if (\n            !this.config.position ||\n            typeof this.config.position !== 'string' ||\n            !this.config.position.split(',').every(coord => !isNaN(parseFloat(coord)))\n        ) {\n            this.log.error('Position is not set in the adapter configuration. Please set it in the adapter settings.');\n            return;\n        }\n        if (this.config.hours == undefined || this.config.hours < 0 || this.config.hours > 48) {\n            this.log.warn(`Invalid hours to display: ${this.config.hours}. Using default value of 24 hours.`);\n            this.config.hours = 24; // Default to 24 hours if invalid\n        }\n\n        if (this.config.pollInterval == undefined || this.config.pollInterval < 1) {\n            this.log.warn(`Invalid poll interval: ${this.config.pollInterval}. Using default value of 12 hour.`);\n            this.config.pollInterval = 12; // Default to 1 hour if invalid\n        }\n        if (\n            this.config.pollIntervalCurrently == undefined ||\n            this.config.pollIntervalCurrently < 10 ||\n            this.config.pollIntervalCurrently >= 2 ** 21 / 60000\n        ) {\n            this.log.warn(\n                `Invalid poll interval currently: ${this.config.pollIntervalCurrently}. Using default value of 30 minute.`,\n            );\n            this.config.pollIntervalCurrently = 30; // Default to 1 minute if invalid\n        }\n\n        if (this.config.maxDistance == undefined || this.config.maxDistance < 1000) {\n            this.log.warn(`Invalid max distance: ${this.config.maxDistance}. Using default value of 50000 meters.`);\n            this.config.maxDistance = 50000; // Default to 50 km if invalid\n        }\n        await this.delay(2000); // Wait for 1 second to ensure the adapter is ready\n        await this.weatherCurrentlyLoop();\n        await this.delay(5000);\n        await this.weatherHourlyLoop();\n        this.log.info(\n            `Adapter ${this.namespace} is now ready. Weather data will be updated every ${this.config.pollIntervalCurrently} minutes for current weather and every ${this.config.pollInterval} hours for hourly weather.`,\n        );\n    }\n    async weatherCurrentlyLoop(): Promise<void> {\n        if (this.weatherTimeout[0]) {\n            this.clearTimeout(this.weatherTimeout[0]);\n        }\n        await this.weatherCurrentlyUpdate();\n\n        this.weatherTimeout[0] = this.setTimeout(\n            () => {\n                void this.weatherCurrentlyLoop();\n            },\n            this.config.pollIntervalCurrently * 60000 + Math.ceil(Math.random() * 8000),\n        );\n    }\n\n    async weatherHourlyLoop(): Promise<void> {\n        if (this.weatherTimeout[1]) {\n            this.clearTimeout(this.weatherTimeout[1]);\n        }\n        await this.weatherHourlyUpdate();\n        const loopTime =\n            new Date().setHours(new Date().getHours() + this.config.pollInterval, 0, 0) +\n            3000 +\n            Math.ceil(Math.random() * 5000); // Add a random delay of up to 5 second\n        this.weatherTimeout[1] = this.setTimeout(() => {\n            void this.weatherHourlyLoop();\n        }, loopTime - Date.now());\n    }\n    async weatherHourlyUpdate(): Promise<void> {\n        const startTime = new Date(new Date().setMinutes(0, 0, 0)).toISOString();\n        const endTime = new Date(new Date().setHours(new Date().getHours() + this.config.hours, 0, 0, 0)).toISOString();\n        try {\n            const result = await axios.get(\n                `https://api.brightsky.dev/weather?lat=${this.config.position.split(',')[0]}&lon=${this.config.position.split(',')[1]}&max_dist=${this.config.maxDistance}&date=${startTime}&last_date=${endTime}`,\n            );\n            if (result.data) {\n                this.log.debug(`Hourly weather data fetched successfully: ${JSON.stringify(result.data)}`);\n                if (result.data.weather && Array.isArray(result.data.weather)) {\n                    /*for (const item in result.data.weather) {\n                        const index = this.weatherArray.findIndex(\n                            el => el.timestamp === result.data.weather[item].timestamp,\n                        );\n                        if (index !== -1) {\n                            this.weatherArray[index] = result.data.weather[item];\n                        } else {\n                            this.weatherArray.push(result.data.weather[item]);\n                        }\n                    }*/\n                    await this.library.writeFromJson(\n                        'hourly.r',\n                        'weather.hourly',\n                        genericStateObjects,\n                        result.data.weather,\n                        true,\n                    );\n                    await this.library.writeFromJson(\n                        'hourly.sources.r',\n                        'weather.sources',\n                        genericStateObjects,\n                        result.data.sources,\n                        true,\n                    );\n                    await this.setState('info.connection', true, true);\n                }\n            }\n        } catch (error) {\n            await this.setState('info.connection', false, true);\n            this.log.error(`Error fetching weather data: ${JSON.stringify(error)}`);\n        }\n    }\n    async weatherCurrentlyUpdate(): Promise<void> {\n        try {\n            const result = await axios.get(\n                `https://api.brightsky.dev/current_weather?lat=${this.config.position.split(',')[0]}&lon=${this.config.position.split(',')[1]}&max_dist=${this.config.maxDistance}`,\n            );\n            if (result.data) {\n                this.log.debug(`Currently weather data fetched successfully: ${JSON.stringify(result.data)}`);\n                if (result.data.weather) {\n                    await this.library.writeFromJson(\n                        'current',\n                        'weather.current',\n                        genericStateObjects,\n                        result.data.weather,\n                        true,\n                    );\n                    await this.library.writeFromJson(\n                        'current.sources.r',\n                        'weather.sources',\n                        genericStateObjects,\n                        result.data.sources,\n                        true,\n                    );\n                    await this.setState('info.connection', true, true);\n                }\n            }\n        } catch (error) {\n            await this.setState('info.connection', false, true);\n            this.log.error(`Error fetching weather data: ${JSON.stringify(error)}`);\n        }\n    }\n\n    private onUnload(callback: () => void): void {\n        this.unload = true;\n\n        try {\n            for (const timeout of this.weatherTimeout) {\n                if (timeout) {\n                    this.clearTimeout(timeout);\n                }\n            }\n\n            callback();\n        } catch {\n            callback();\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Brightsky(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Brightsky())();\n}\n"],
  "mappings": "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",
  "names": ["axios"]
}
